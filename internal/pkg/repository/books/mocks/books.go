// Code generated by MockGen. DO NOT EDIT.
// Source: books.go
//
// Generated by this command:
//
//	mockgen -source books.go -typed -destination mocks/books.go -package mocks -typed -mock_names client=Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pocketbook_cloud_client "github.com/micronull/pocketbook-cloud-client"
	gomock "go.uber.org/mock/gomock"
)

// Client is a mock of client interface.
type Client struct {
	ctrl     *gomock.Controller
	recorder *ClientMockRecorder
	isgomock struct{}
}

// ClientMockRecorder is the mock recorder for Client.
type ClientMockRecorder struct {
	mock *Client
}

// NewClient creates a new mock instance.
func NewClient(ctrl *gomock.Controller) *Client {
	mock := &Client{ctrl: ctrl}
	mock.recorder = &ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Client) EXPECT() *ClientMockRecorder {
	return m.recorder
}

// Books mocks base method.
func (m *Client) Books(ctx context.Context, token string, limit, offset int) (pocketbook_cloud_client.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Books", ctx, token, limit, offset)
	ret0, _ := ret[0].(pocketbook_cloud_client.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Books indicates an expected call of Books.
func (mr *ClientMockRecorder) Books(ctx, token, limit, offset any) *ClientBooksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Books", reflect.TypeOf((*Client)(nil).Books), ctx, token, limit, offset)
	return &ClientBooksCall{Call: call}
}

// ClientBooksCall wrap *gomock.Call
type ClientBooksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientBooksCall) Return(arg0 pocketbook_cloud_client.Books, arg1 error) *ClientBooksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientBooksCall) Do(f func(context.Context, string, int, int) (pocketbook_cloud_client.Books, error)) *ClientBooksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientBooksCall) DoAndReturn(f func(context.Context, string, int, int) (pocketbook_cloud_client.Books, error)) *ClientBooksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Login mocks base method.
func (m *Client) Login(ctx context.Context, req pocketbook_cloud_client.LoginRequest) (pocketbook_cloud_client.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(pocketbook_cloud_client.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *ClientMockRecorder) Login(ctx, req any) *ClientLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*Client)(nil).Login), ctx, req)
	return &ClientLoginCall{Call: call}
}

// ClientLoginCall wrap *gomock.Call
type ClientLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientLoginCall) Return(arg0 pocketbook_cloud_client.Token, arg1 error) *ClientLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientLoginCall) Do(f func(context.Context, pocketbook_cloud_client.LoginRequest) (pocketbook_cloud_client.Token, error)) *ClientLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientLoginCall) DoAndReturn(f func(context.Context, pocketbook_cloud_client.LoginRequest) (pocketbook_cloud_client.Token, error)) *ClientLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Providers mocks base method.
func (m *Client) Providers(ctx context.Context, userName string) ([]pocketbook_cloud_client.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Providers", ctx, userName)
	ret0, _ := ret[0].([]pocketbook_cloud_client.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Providers indicates an expected call of Providers.
func (mr *ClientMockRecorder) Providers(ctx, userName any) *ClientProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Providers", reflect.TypeOf((*Client)(nil).Providers), ctx, userName)
	return &ClientProvidersCall{Call: call}
}

// ClientProvidersCall wrap *gomock.Call
type ClientProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientProvidersCall) Return(arg0 []pocketbook_cloud_client.Provider, arg1 error) *ClientProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientProvidersCall) Do(f func(context.Context, string) ([]pocketbook_cloud_client.Provider, error)) *ClientProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientProvidersCall) DoAndReturn(f func(context.Context, string) ([]pocketbook_cloud_client.Provider, error)) *ClientProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
