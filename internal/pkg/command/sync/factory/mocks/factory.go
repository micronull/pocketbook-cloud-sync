// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -source factory.go -destination mocks/factory.go -package mocks -typed -exclude_interfaces Synchronizer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigurator is a mock of Configurator interface.
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorMockRecorder
	isgomock struct{}
}

// MockConfiguratorMockRecorder is the mock recorder for MockConfigurator.
type MockConfiguratorMockRecorder struct {
	mock *MockConfigurator
}

// NewMockConfigurator creates a new mock instance.
func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &MockConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurator) EXPECT() *MockConfiguratorMockRecorder {
	return m.recorder
}

// ClientID mocks base method.
func (m *MockConfigurator) ClientID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientID indicates an expected call of ClientID.
func (mr *MockConfiguratorMockRecorder) ClientID() *MockConfiguratorClientIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientID", reflect.TypeOf((*MockConfigurator)(nil).ClientID))
	return &MockConfiguratorClientIDCall{Call: call}
}

// MockConfiguratorClientIDCall wrap *gomock.Call
type MockConfiguratorClientIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfiguratorClientIDCall) Return(arg0 string) *MockConfiguratorClientIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfiguratorClientIDCall) Do(f func() string) *MockConfiguratorClientIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfiguratorClientIDCall) DoAndReturn(f func() string) *MockConfiguratorClientIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClientSecret mocks base method.
func (m *MockConfigurator) ClientSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientSecret indicates an expected call of ClientSecret.
func (mr *MockConfiguratorMockRecorder) ClientSecret() *MockConfiguratorClientSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSecret", reflect.TypeOf((*MockConfigurator)(nil).ClientSecret))
	return &MockConfiguratorClientSecretCall{Call: call}
}

// MockConfiguratorClientSecretCall wrap *gomock.Call
type MockConfiguratorClientSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfiguratorClientSecretCall) Return(arg0 string) *MockConfiguratorClientSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfiguratorClientSecretCall) Do(f func() string) *MockConfiguratorClientSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfiguratorClientSecretCall) DoAndReturn(f func() string) *MockConfiguratorClientSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Directory mocks base method.
func (m *MockConfigurator) Directory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Directory")
	ret0, _ := ret[0].(string)
	return ret0
}

// Directory indicates an expected call of Directory.
func (mr *MockConfiguratorMockRecorder) Directory() *MockConfiguratorDirectoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Directory", reflect.TypeOf((*MockConfigurator)(nil).Directory))
	return &MockConfiguratorDirectoryCall{Call: call}
}

// MockConfiguratorDirectoryCall wrap *gomock.Call
type MockConfiguratorDirectoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfiguratorDirectoryCall) Return(arg0 string) *MockConfiguratorDirectoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfiguratorDirectoryCall) Do(f func() string) *MockConfiguratorDirectoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfiguratorDirectoryCall) DoAndReturn(f func() string) *MockConfiguratorDirectoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Password mocks base method.
func (m *MockConfigurator) Password() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password")
	ret0, _ := ret[0].(string)
	return ret0
}

// Password indicates an expected call of Password.
func (mr *MockConfiguratorMockRecorder) Password() *MockConfiguratorPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockConfigurator)(nil).Password))
	return &MockConfiguratorPasswordCall{Call: call}
}

// MockConfiguratorPasswordCall wrap *gomock.Call
type MockConfiguratorPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfiguratorPasswordCall) Return(arg0 string) *MockConfiguratorPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfiguratorPasswordCall) Do(f func() string) *MockConfiguratorPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfiguratorPasswordCall) DoAndReturn(f func() string) *MockConfiguratorPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserName mocks base method.
func (m *MockConfigurator) UserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserName indicates an expected call of UserName.
func (mr *MockConfiguratorMockRecorder) UserName() *MockConfiguratorUserNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockConfigurator)(nil).UserName))
	return &MockConfiguratorUserNameCall{Call: call}
}

// MockConfiguratorUserNameCall wrap *gomock.Call
type MockConfiguratorUserNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfiguratorUserNameCall) Return(arg0 string) *MockConfiguratorUserNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfiguratorUserNameCall) Do(f func() string) *MockConfiguratorUserNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfiguratorUserNameCall) DoAndReturn(f func() string) *MockConfiguratorUserNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
