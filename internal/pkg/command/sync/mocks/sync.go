// Code generated by MockGen. DO NOT EDIT.
// Source: sync.go
//
// Generated by this command:
//
//	mockgen -source sync.go -destination mocks/sync.go -package mocks -mock_names app=App
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sync "pocketbook-cloud-sync/internal/app/sync"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// App is a mock of app interface.
type App struct {
	ctrl     *gomock.Controller
	recorder *AppMockRecorder
	isgomock struct{}
}

// AppMockRecorder is the mock recorder for App.
type AppMockRecorder struct {
	mock *App
}

// NewApp creates a new mock instance.
func NewApp(ctrl *gomock.Controller) *App {
	mock := &App{ctrl: ctrl}
	mock.recorder = &AppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *App) EXPECT() *AppMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *App) Sync(ctx context.Context, params sync.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *AppMockRecorder) Sync(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*App)(nil).Sync), ctx, params)
}
