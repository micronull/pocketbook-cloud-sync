// Code generated by MockGen. DO NOT EDIT.
// Source: sync.go
//
// Generated by this command:
//
//	mockgen -source sync.go -typed -destination mocks/sync.go -package mocks -typed -mock_names books=Books
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "pocketbook-cloud-sync/internal/pkg/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Books is a mock of books interface.
type Books struct {
	ctrl     *gomock.Controller
	recorder *BooksMockRecorder
	isgomock struct{}
}

// BooksMockRecorder is the mock recorder for Books.
type BooksMockRecorder struct {
	mock *Books
}

// NewBooks creates a new mock instance.
func NewBooks(ctrl *gomock.Controller) *Books {
	mock := &Books{ctrl: ctrl}
	mock.recorder = &BooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Books) EXPECT() *BooksMockRecorder {
	return m.recorder
}

// Books mocks base method.
func (m *Books) Books(ctx context.Context) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Books", ctx)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Books indicates an expected call of Books.
func (mr *BooksMockRecorder) Books(ctx any) *BooksBooksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Books", reflect.TypeOf((*Books)(nil).Books), ctx)
	return &BooksBooksCall{Call: call}
}

// BooksBooksCall wrap *gomock.Call
type BooksBooksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BooksBooksCall) Return(arg0 []domain.Book, arg1 error) *BooksBooksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BooksBooksCall) Do(f func(context.Context) ([]domain.Book, error)) *BooksBooksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BooksBooksCall) DoAndReturn(f func(context.Context) ([]domain.Book, error)) *BooksBooksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
